datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Add quotes and env()
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  password      String
  role          UserRole     @default(DEVELOPER)
  teams         TeamMember[]
  createdIssues Issue[]      @relation("CreatedBy")
  assignedIssues Issue[]     @relation("AssignedTo")
  comments      Comment[]
  activities    ActivityLog[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}


model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  members     TeamMember[]
  projects    Project[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TeamMember {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  team      Team       @relation(fields: [teamId], references: [id])
  teamId    String
  role      TeamRole   @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, teamId])
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  issues      Issue[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Issue {
  id          String        @id @default(uuid())
  title       String
  description String
  status      Status       @default(OPEN)
  priority    Priority     @default(MEDIUM)
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  createdBy   User         @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String
  assignedTo  User?        @relation("AssignedTo", fields: [assigneeId], references: [id])
  assigneeId  String?
  comments    Comment[]
  activities  ActivityLog[]
  labels      Label[]
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  issue     Issue     @relation(fields: [issueId], references: [id])
  issueId   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ActivityLog {
  id          String       @id @default(uuid())
  action      ActivityType
  description String
  issue       Issue        @relation(fields: [issueId], references: [id])
  issueId     String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime     @default(now())
}

model Label {
  id        String    @id @default(uuid())
  name      String
  color     String
  issues    Issue[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  DEVELOPER
}

enum TeamRole {
  LEADER
  MEMBER
}

enum Status {
  OPEN
  IN_PROGRESS
  REVIEW
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CREATED
  UPDATED
  COMMENTED
  STATUS_CHANGED
  ASSIGNED
  LABEL_ADDED
  LABEL_REMOVED
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean         @default(false)
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  issueId   String?
  issue     Issue?          @relation(fields: [issueId], references: [id])
  createdAt DateTime        @default(now())
}

enum NotificationType {
  ISSUE_ASSIGNED
  ISSUE_COMMENTED
  STATUS_CHANGED
  MENTIONED
  DUE_DATE_REMINDER
}